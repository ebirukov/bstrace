version: 3

vars:
  ARCH:
    sh: |
      case $(uname -m) in
        x86_64) echo x86 ;;
        aarch64) echo arm64 ;;
        armv7l) echo arm ;;
        riscv64) echo riscv ;;
        *) echo unknown ;;
      esac

tasks:
  bpf-compile:
    desc: "–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç"
    cmds:
      - for: [ common, parser, tp ]
        task: bpf-compile-clang
        vars:
          BPF_SRC_DIR: "kprog/src/{{.ITEM}}"
          BPF_OBJ_DIR: "kprog/obj/{{.ITEM}}"
          CFLAGS: "-D__TARGET_ARCH_{{.ARCH}} -g -O2 -Wall"

  bpf-compile-test:
    desc: "–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤"
    cmds:
      - for: [ common, parser, tp ]
        task: bpf-compile-clang
        vars:
          BPF_SRC_DIR: "kprog/src/{{.ITEM}}"
          BPF_OBJ_DIR: "bpf_test/kprog/obj/{{.ITEM}}"
          CFLAGS: "-D__TARGET_ARCH_{{.ARCH}} -D__TEST_RUN -g -O2 -Wall"

  bpf-compile-clang:
    desc: "–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç ebpf —Ñ–∞–π–ª—ã —Å –ø–æ–º–æ—â—å—é clang"
    vars:
      BPF_HEADER_DIR: "/kprog/src/headers"
      BPF_SRC_FILES:
        sh: find {{.BPF_SRC_DIR}} -name '*.bpf.c'
    cmds:
      - for:
          var: BPF_SRC_FILES
          as: FILE
        cmd: |
          mkdir -p {{.BPF_OBJ_DIR}}
          OUT={{.BPF_OBJ_DIR}}/{{.FILE | base | replace ".c" ".o"}}
          # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∏–∑–º–µ–Ω—è–ª—Å—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
          if [ ! -f "$OUT" ] || [ {{.FILE}} -nt "$OUT" ]; then
            clang -target bpf {{.CFLAGS}} -c {{.FILE}} -o $OUT -I.{{.BPF_HEADER_DIR}}
            echo "‚úî Compiled {{.FILE}} ‚Üí $OUT"
          fi

  bpf-test-build-initramfs-arm64:
    cmds:
      - task: bpf-test-build-initramfs
        vars:
          ARCH_BUILD: "arm64"

  bpf-test-build-initramfs:
    desc: "–°–æ–±–∏—Ä–∞–µ—Ç initramfs –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"
    dir: "bpf_test"
    vars:
      ARCH_BUILD: "{{.ARCH_BUILD | default `amd64` }}"
      FS_ROOT_DIR: "build/{{.ARCH_BUILD}}/initramfs"
    cmds:
      - task: bpf-test-build-exec
        vars:
          ARCH_BUILD: "{{.ARCH_BUILD}}"
      - |
        rm -rf {{.FS_ROOT_DIR}}/*
        mkdir -p {{.FS_ROOT_DIR}}/boot
        cp build/{{.ARCH_BUILD}}/bin/* {{.FS_ROOT_DIR}}
        cp kernel/{{.ARCH_BUILD}}/btf/* {{.FS_ROOT_DIR}}/boot/
        

  bpf-test-build-exec:
    desc: "–°–æ–±–∏—Ä–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"
    vars:
      BUILD_DIR: "build/{{.ARCH_BUILD}}/bin"
    dir: "bpf_test"
    cmds:
      - |
        mkdir -p {{.BUILD_DIR}}
      - task: bpf-test-compile-arch
        vars:
          BUILD_DIR: "{{.BUILD_DIR}}"
          ARCH_BUILD: "{{.ARCH_BUILD}}"

  bpf-test-compile-arch:
    desc: "–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"
    vars:
      ARCH_BUILD: "{{.ARCH_BUILD | default `amd64` }}"
    dir: "bpf_test"
    cmds:
      - |
      - echo "Compile test-runner as {{.ARCH_BUILD}}"
      - go build -o {{.BUILD_DIR}}/init ./cmd/os-init-runner
      - |
        echo "Compile test as {{.ARCH_BUILD}}"
        go test -c -o {{.BUILD_DIR}}/test
    env:
      GOARCH: "{{.ARCH_BUILD | default .ARCH_OS }}"
      GOOS: "linux"












#  download-firecracker:
#    desc: "–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç"
#    cmds:
#      - for: [ x86_64, aarch64 ]
#        task: download-firecracker-arch
#        vars:
#          ARCH_OVERRIDE: "{{.ITEM}}"
#
#  download-firecracker-arch:
#    desc: "Download and extract Firecracker binary for specified architecture"
#    vars:
#      FIRECRACKER_VERSION: "v1.12.1"
#      ARCH: "{{.ARCH_OVERRIDE | default `x86_64`}}"
#      BINARY_NAME: "firecracker-{{.FIRECRACKER_VERSION}}-{{.ARCH}}"
#      BASE_URL: "https://github.com/firecracker-microvm/firecracker/releases/download/{{.FIRECRACKER_VERSION}}/{{.BINARY_NAME}}.tgz"
#      BIN_PATH: "bin/{{.BINARY_NAME}}"
#    cmds:
#      - mkdir -p bin
#      - |
#        echo "üì• Downloading Firecracker {{.FIRECRACKER_VERSION}} for {{.ARCH}}..."
#        curl -sL "{{.BASE_URL}}" | \
#          tar -xz -C bin --strip-components=1 "release-{{.FIRECRACKER_VERSION}}-{{.ARCH}}/{{.BINARY_NAME}}"
#      - chmod +x "{{.BIN_PATH}}"
#    status:
#      - test -f "{{.BIN_PATH}}"