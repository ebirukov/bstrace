version: 3

vars:
  ARCH:
    sh: |
      case $(uname -m) in
        x86_64) echo x86 ;;
        aarch64) echo arm64 ;;
        armv7l) echo arm ;;
        riscv64) echo riscv ;;
        *) echo unknown ;;
      esac

tasks:
  bpf-compile:
    desc: "Компилирует"
    cmds:
      - for: [ common, parser, tp ]
        task: bpf-compile-clang
        vars:
          BPF_SRC_DIR: "kprog/src/{{.ITEM}}"
          BPF_OBJ_DIR: "kprog/obj/{{.ITEM}}"
          CFLAGS: "-D__TARGET_ARCH_{{.ARCH}} -g -O2 -Wall"

  bpf-compile-test:
    desc: "Компилирует для тестов"
    cmds:
      - for: [ common, parser, tp ]
        task: bpf-compile-clang
        vars:
          BPF_SRC_DIR: "kprog/src/{{.ITEM}}"
          BPF_OBJ_DIR: "bpf_test/kprog/obj/{{.ITEM}}"
          CFLAGS: "-D__TARGET_ARCH_{{.ARCH}} -D__TEST_RUN -g -O2 -Wall"

  bpf-compile-clang:
    desc: "Компилирует ebpf файлы с помощью clang"
    vars:
      BPF_HEADER_DIR: "/kprog/src/headers"
      BPF_SRC_FILES:
        sh: find {{.BPF_SRC_DIR}} -name '*.bpf.c'
    cmds:
      - for:
          var: BPF_SRC_FILES
          as: FILE
        cmd: |
          mkdir -p {{.BPF_OBJ_DIR}}
          OUT={{.BPF_OBJ_DIR}}/{{.FILE | base | replace ".c" ".o"}}
          # выполняем только если исходный файл изменялся после последней компиляции
          if [ ! -f "$OUT" ] || [ {{.FILE}} -nt "$OUT" ]; then
            clang -target bpf {{.CFLAGS}} -c {{.FILE}} -o $OUT -I.{{.BPF_HEADER_DIR}}
            echo "✔ Compiled {{.FILE}} → $OUT"
          fi

  bpf-test-install-runner:
    desc: "устанавливает бинарник запускающий тесты на qemu"
    dir: bpf_test
    vars:
      BUILD_DIR:
        sh: pwd
    cmd: |
      echo "install qemu-runner to {{.BUILD_DIR}}/build"
      go install ./cmd/qemu-runner/
    env:
      GOBIN: "{{.BUILD_DIR}}/build"
    status:
      - test -f {{.BUILD_DIR}}/build/qemu-runner

  bpf-test-run-arch:
    desc: "Запуск тестов bpf для заданной архитектуры"
    dir: bpf_test
    deps:
      - task: bpf-test-install-runner
      - task: bpf-test-build-initramfs
        vars:
          ARCH_BUILD: "{{.QEMU_ARCH | default `amd64` }}"
    vars:
      KERNEL_FILES:
        sh: find kernel/{{.QEMU_ARCH}} \( -name 'linux-*' -o -name 'vmlinuz-*' \) ! -name '*.btf'
    cmds:
      - for:
          var: KERNEL_FILES
        task: bpf-test-run-arch-kernel
        vars:
          FILE: "{{.ITEM}}"
          QEMU_ARCH: "{{.QEMU_ARCH}}"

  bpf-test-run-arch-kernel:
    desc: "Запуск тестов bpf для заданной архитектуры на выбранном ядре"
    dir: bpf_test
    vars:
      FS_ROOT_DIR: "build/{{.QEMU_ARCH}}/initramfs"
      PWD:
        sh: pwd
    cmds:
      - |
        mkdir -p {{.FS_ROOT_DIR}}/sys/kernel/btf
        cp {{.FILE}}.btf {{.FS_ROOT_DIR}}/sys/kernel/btf/vmlinux
      - |
        echo "run test on arch {{.QEMU_ARCH}} with kernel {{.FILE}}"
        {{.PWD}}/build/qemu-runner -kernel {{.FILE}}
    env:
      QEMU_ARCH: "{{.QEMU_ARCH}}"

  bpf-test-run:
    cmds:
      - for: [ arm64, amd64 ]
        task: bpf-test-run-arch
        vars:
          QEMU_ARCH: "{{.ITEM}}"

  bpf-test-build-initramfs:
    desc: "Собирает initramfs под заданную платформенную архитектуру"
    dir: "bpf_test"
    vars:
      ARCH_BUILD: "{{.ARCH_BUILD | default `amd64` }}"
      FS_ROOT_DIR: "build/{{.ARCH_BUILD}}/initramfs"
    cmds:
      - task: bpf-test-build-exec
        vars:
          ARCH_BUILD: "{{.ARCH_BUILD}}"
      - |
        rm -rf {{.FS_ROOT_DIR}}/*
        mkdir -p {{.FS_ROOT_DIR}}
        cp build/{{.ARCH_BUILD}}/bin/* {{.FS_ROOT_DIR}}
        

  bpf-test-build-exec:
    desc: "Собирает бинарники под заданную платформенную архитектуру"
    vars:
      BUILD_DIR: "build/{{.ARCH_BUILD}}/bin"
    dir: "bpf_test"
    cmds:
      - |
        mkdir -p {{.BUILD_DIR}}
      - task: bpf-test-compile-arch
        vars:
          BUILD_DIR: "{{.BUILD_DIR}}"
          ARCH_BUILD: "{{.ARCH_BUILD}}"

  bpf-test-compile-arch:
    desc: "Компилирует тесты под заданную платформенную архитектуру"
    vars:
      ARCH_BUILD: "{{.ARCH_BUILD | default `amd64` }}"
    dir: "bpf_test"
    cmds:
      - |
        echo "Compile test-runner as {{.ARCH_BUILD}}"
        go build -o {{.BUILD_DIR}}/init ./cmd/os-init-runner
      - |
        echo "Compile test as {{.ARCH_BUILD}}"
        go test -c -o {{.BUILD_DIR}}/test
    env:
      GOARCH: "{{.ARCH_BUILD | default .ARCH_OS }}"
      GOOS: "linux"
